// ########################################
// ####### Compute Shader Functions #######
// ########################################
#pragma kernel GenerateParticle
#pragma kernel ResetNeighboursCounter
#pragma kernel UpdateNeighbours
#pragma kernel AssignNeighbours
#pragma kernel UpdateHeights
#pragma kernel PropagateHeightUpdate
#pragma kernel UpdateTemperatures
#pragma kernel PropagateTemperatureUpdate
#pragma kernel UpdateVelocities
#pragma kernel PropagateVelocityUpdate
#pragma kernel TimeIntegration
#pragma kernel PropagatePositionUpdate
#pragma kernel UpdateTerrainTemperatures
#pragma kernel UpdateTerrainHeights
#pragma kernel GaussianBlurTerrainHeights

// The structure matching the cpu representation of the staggered grid
struct StaggeredGridGPU{
    uint _NbCols, _NbLines;
    float _DeltaCols, _DeltaLines;
};

// The structure matching the cpu representation of the neighbour grid
struct NeighbourGridGPU{
    uint _NbCols, _NbLines;
    float _DeltaCols, _DeltaLines;
    uint _NbMaxNeighbours;
};

// The structure matching the cpu representation of a particle
struct ParticleGPU{
    float3 _Velocity;
    float3 _Position;
    float  _Height;
    float3 _HeightGradient;
    float  _Density;
    float  _Mass;
    float  _Volume;
    uint   _Cell;
    uint   _Id;
    float  _Temperature;
};


// ########################################
// ########### Particle Buffers ###########
// ########################################
RWStructuredBuffer<ParticleGPU> _Particles;
RWStructuredBuffer<float>  _Heights;
RWStructuredBuffer<float3> _HeightsGradients;
RWStructuredBuffer<float3> _Positions;
RWStructuredBuffer<float>  _Temperatures;
RWStructuredBuffer<float3> _Velocities;
RWStructuredBuffer<int>    _ParticleNeighbours;

// ########################################
// ######## Staggered Grid Buffers ########
// ########################################
uniform StructuredBuffer<StaggeredGridGPU> _StaggeredGrid;
uniform StructuredBuffer<float>  _StaggeredGridHeights;
uniform StructuredBuffer<float>  _StaggeredGridHalfHeights;
uniform StructuredBuffer<float2> _StaggeredGridGradients;

// ########################################
// ######## Neighbors Grid Buffers ########
// ########################################
uniform StructuredBuffer<NeighbourGridGPU> _NeighbourGrid;
RWStructuredBuffer<float> _NeighbourGridCells;
RWStructuredBuffer<uint> _NeighbourGridCellsCounter;

// ########################################
// ########### Terrain Buffers ############
// ########################################
RWStructuredBuffer<float> _InitialTerrainHeights;
RWStructuredBuffer<float> _TerrainHeights;
RWStructuredBuffer<float> _TerrainTemperatures;


uniform float H;
uniform float PI;
uniform float G;

uniform float _Mu;
uniform float _Ke;
uniform float _ThetaE;
uniform float ALPHA;

uniform bool FirstTimeBlur;
uniform bool GaussianBlur;
uniform bool _DisplayLava;

uniform float RHO_0;

uniform float SPIKE;
uniform uint MAX_PARTICLES;
uniform uint _NbCurParticles;

uniform float DT;
uniform float RAND;

uniform uint _NbNewParticles;
uniform float3 _NewPosition;


// ##################################################################################################################
// ########################################### STAGGERED GRID #######################################################
// ##################################################################################################################

/**
 * Convert 2D indices for the staggered grid into 1D index
 * @param posZ The j index
 * @param posX The i index
 * @return The new index
*/
uint StaggeredGridConvertIndices(uint posZ, uint posX){
    return posX + posZ * _StaggeredGrid[0]._NbCols;
}

/**
 * Convert 2D indices for the staggered grid half heights into 1D index
 * @param posZ The j index
 * @param posX The i index
 * @return The new index
*/
uint StaggeredGridConvertIndicesHalf(uint posZ, uint posX){
    return posX + posZ * (_StaggeredGrid[0]._NbCols-1);
}

/**
 * Get the 2D gird indices given the world position
 * @param pos The world position
 * @return The indices as a float2 (j,i)
*/
uint2 StaggeredGridGetIndices(float3 pos){
    uint posX = (uint)(pos.x / _StaggeredGrid[0]._DeltaCols);
    uint posZ = (uint)(pos.z / _StaggeredGrid[0]._DeltaLines);
    return uint2(posZ, posX);
};

/**
 * Get the world position given the grid index
 * @param id The grid index
 * @return The world position
*/
float3 StaggeredGridGetPosition(uint id){
    uint yId = id / _StaggeredGrid[0]._NbCols;
    uint xId = id - yId * _StaggeredGrid[0]._NbCols;

    float x = xId*_StaggeredGrid[0]._DeltaCols;
    float y = _StaggeredGridHeights[id];
    float z = yId*_StaggeredGrid[0]._DeltaLines;
    
    return float3(x,y,z);
}

/**
 * Bilinear interpolation for the staggered grid
 * @param x The x position of the current point
 * @param z The y position of the current point (z because in unity y is the altitude)
 * @param xIdx The i index of the current point in the grid
 * @param zIdx The j index of the current point in the grid
 * @param w11 The down left value in the cell the current point is in
 * @param w12 The up left value in the cell the current point is in
 * @param w21 The down right value in the cell the current point is in
 * @param w22 The up right value in the cell the current point is in
 * @return The interpolated value for the current point
*/
float StaggeredGridBilinearInterpolation(float x, float z, float xIdx, float zIdx, float w11, float w12, float w21, float w22){
    float xLeft  = xIdx*_StaggeredGrid[0]._DeltaCols;
    float xRight = (xIdx+1)*_StaggeredGrid[0]._DeltaCols;
    float zUp    = (zIdx+1)*_StaggeredGrid[0]._DeltaLines;
    float zDown  = zIdx*_StaggeredGrid[0]._DeltaLines;

    float x2_prime = xRight - x;
    float x1_prime = x - xLeft;
    float z2_prime = zUp - z;
    float z1_prime = z - zDown;

    float factor = 1.0/(_StaggeredGrid[0]._DeltaCols*_StaggeredGrid[0]._DeltaLines);
    float res = ((w11*x2_prime + w21*x1_prime)*z2_prime) + ((w12*x2_prime + w22*x1_prime)*z1_prime);

    return res *= factor;
}

/**
 * Get the height of the terrain at a given position
 * @param pos The world position
 * @return The height as a floating point
*/
float StaggeredGridGetHeight(float3 pos){
    uint2 indices = StaggeredGridGetIndices(pos);
    uint zIdx = indices[0];
    uint xIdx = indices[1];

    float x = pos.x;
    float z = pos.z;

    // interpolate height, bilinearly
    float upLeft    = (zIdx >= _StaggeredGrid[0]._NbLines-1 || xIdx <= 0)                           ? 0.0f : _StaggeredGridHalfHeights[StaggeredGridConvertIndicesHalf(zIdx, xIdx-1)];
    float upRight   = (zIdx >= _StaggeredGrid[0]._NbLines-1 || xIdx >= _StaggeredGrid[0]._NbCols-1) ? 0.0f : _StaggeredGridHalfHeights[StaggeredGridConvertIndicesHalf(zIdx, xIdx)];
    float downLeft  = (zIdx <= 0 || xIdx <= 0)                                                      ? 0.0f : _StaggeredGridHalfHeights[StaggeredGridConvertIndicesHalf(zIdx-1, xIdx-1)];
    float downRight = (zIdx <= 0 || xIdx >= _StaggeredGrid[0]._NbCols-1)                            ? 0.0f : _StaggeredGridHalfHeights[StaggeredGridConvertIndicesHalf(zIdx-1, xIdx)];

    float ownRes = StaggeredGridBilinearInterpolation(x, z, xIdx, zIdx, downLeft, upLeft, downRight, upRight);
    return ownRes;
}

/**
 * Get the height gradient of the terrain at a given position
 * @param pos The world position
 * @return The gradient as a float3
*/
float3 StaggeredGridGetGradient(float3 pos){
    uint2 indices = StaggeredGridGetIndices(pos);
    uint zIdx = indices[0];
    uint xIdx = indices[1];

    float x = pos.x;
    float z = pos.z;

    // interpolate gradients bilinearly
    float2 upLeft    = (zIdx >= _StaggeredGrid[0]._NbLines-1 || xIdx <= 0)                           ? float2(0.0f, 0.0f) : _StaggeredGridGradients[StaggeredGridConvertIndicesHalf(zIdx, xIdx-1)];
    float2 upRight   = (zIdx >= _StaggeredGrid[0]._NbLines-1 || xIdx >= _StaggeredGrid[0]._NbCols-1) ? float2(0.0f, 0.0f) : _StaggeredGridGradients[StaggeredGridConvertIndicesHalf(zIdx, xIdx)];
    float2 downLeft  = (zIdx <= 0 || xIdx <= 0)                                                      ? float2(0.0f, 0.0f) : _StaggeredGridGradients[StaggeredGridConvertIndicesHalf(zIdx-1, xIdx-1)];
    float2 downRight = (zIdx <= 0 || xIdx >= _StaggeredGrid[0]._NbCols-1)                            ? float2(0.0f, 0.0f) : _StaggeredGridGradients[StaggeredGridConvertIndicesHalf(zIdx-1, xIdx)];

    float dx, dz;

    dx = StaggeredGridBilinearInterpolation(x, z, xIdx, zIdx, downLeft.x, upLeft.x, downRight.x, upRight.x);
    dz = StaggeredGridBilinearInterpolation(x, z, xIdx, zIdx, downLeft.y, upLeft.y, downRight.y, upRight.y);

    return float3(dx, pos.y, dz);
}



// ##################################################################################################################
// ############################################ SPH KERNELS #########################################################
// ##################################################################################################################

/**
 * The distance between two positions
 * @param p1 The first position
 * @param p2 The second position
 * @return The distance as a floating point
*/
float KernelDistance(float3 p1, float3 p2){
    return sqrt((p1.x-p2.x)*(p1.x-p2.x) + (p1.z-p2.z)*(p1.z-p2.z));
}

/**
 * Get the poly6 kernel weight value
 * @param p1 The first position
 * @param p2 The second position
 * @param h The kernel's radius
 * @return The weight as a floating point
*/
float W_POLY6(float3 p1, float3 p2, float h){
    float r = KernelDistance(p1, p2);
    if(r<0 || r>h) return 0.0f;
    float alpha = 4/(PI*h*h*h*h*h*h*h*h);
    float tmp = (h*h - r*r);
    return alpha*tmp*tmp*tmp;
}

/**
 * Get the poly6 kernel weight value
 * @param p1 The first particle
 * @param p2 The second particle
 * @param h The kernel's radius
 * @return The weight as a floating point
*/
float W_POLY6(ParticleGPU p1, ParticleGPU p2, float h){
    float r = KernelDistance(p1._Position, p2._Position);
    if(r<0 || r>h) return 0.0f;
    float alpha = 4/(PI*h*h*h*h*h*h*h*h);
    float tmp = (h*h - r*r);
    return alpha*tmp*tmp*tmp;
}

/**
 * Get the poly6 gradient kernel weight value
 * @param p1 The first particle
 * @param p2 The second particle
 * @param h The kernel's radius
 * @return The weight as a floating point
*/
float3 W_POLY6_Grad(ParticleGPU p1, ParticleGPU p2, float h){
    float r = KernelDistance(p1._Position, p2._Position);
    if(r<=0 || r>H) return float3(0,0,0);
    float alpha = 4/(PI*h*h*h*h*h*h*h*h);
    float tmp = (h*h - r*r);
    float factor = -6.0f*r*tmp*tmp;
    return alpha *factor * (p1._Position - p2._Position) / r;
}

/**
 * Get the factor for the new kernel
 * @param rTmp The distance between two particles
 * @param h The kernel radius
 * @return The new factor
*/
float K_NEW(float rTmp, float h){
    float r = rTmp < 0.001f ? 0.001f : rTmp;
    if(r<=h) {
        float gamma = 0.577216;
        return (-log(r)-gamma+log(2)) + (1.0f/4.0f)*r*r*(-log(r)-gamma+1+log(2));
    }
    else return 0.0f;
}

/**
 * Get the new kernel weight value
 * @param p1 The first particle
 * @param p2 The second particle
 * @param h The kernel's radius
 * @return The weight as a floating point
*/
float W_NEW(ParticleGPU p1, ParticleGPU p2, float h){
    float r = KernelDistance(p1._Position, p2._Position);
    float k = sqrt(3.0f/2.0f)*(1.0f/p2._Height);
    return (2/(PI*H*H))*K_NEW(k*r, h);
}


// ##################################################################################################################
// ############################################ SPH FUNCTIONS #######################################################
// ##################################################################################################################

/**
 * Get a particle given an id
 * @param id The thread id
 * @return The particle corresponding to the id
*/
ParticleGPU GetParticle(uint3 id : SV_DispatchThreadID){
    return _Particles[id.x];
}

/**
 * Get a particle given an id
 * @param id The particle's id
 * @return The particle corresponding to the id
*/
ParticleGPU GetParticle(uint id){
    return _Particles[id];
}

/**
 * Tells if two particles are neighbours
 * @param pi The first particle
 * @param pj The second particle
 * @param h The kernel radius
 * @return True if the particle's distance is smaller than the kernel radius
*/
bool AreNeighbours(ParticleGPU pi, ParticleGPU pj, float h){
    return KernelDistance(pi._Position, pj._Position) < h;
}

/**
 * Tells if two positions are neighbours
 * @param pi The first position
 * @param pj The second position
 * @param h The kernel radius
 * @return True if the position's distance is smaller than the kernel radius
*/
bool AreNeighbours(float3 pi, float3 pj, float h){
    return KernelDistance(pi, pj) < h;
}

/**
 * Get the surface gradient given a particle
 * @param pi The current particle
 * @return The surface gradient as a float3
*/
float3 GetGradientSurface(ParticleGPU pi){
    return StaggeredGridGetGradient(pi._Position) + pi._HeightGradient;
}

/**
 * Generate a random position given a random number and an id
 * @param pos The random position
 * @param id The particle's id
 * @return A random position
*/
float3 GenRandomPos(float3 pos, uint id){
    float3 newPos = float3(RAND*sin(RAND + id)+pos.x, 0, -RAND*cos(RAND+id)+pos.z);
    newPos.y = StaggeredGridGetHeight(newPos);
    return newPos;
}



// ##################################################################################################################
// ############################################ NEIGHBOURS FUNCTIONS ################################################
// ##################################################################################################################

/**
 * Get the cell's id given a position
 * @param pos The world position
 * @return The cell id
*/
uint GetCell(float3 pos){
    uint posX = (uint)(pos.x / _NeighbourGrid[0]._DeltaCols);
    uint posZ = (uint)(pos.z / _NeighbourGrid[0]._DeltaLines);
    return ((posZ*_NeighbourGrid[0]._NbCols + posX)*_NeighbourGrid[0]._NbMaxNeighbours);
}

/**
 * Convert the neighbour grid id into the neighbour counters buffer id
 * @param cellId The cell id in the neighbour grid
 * @return The neighbour counter id
*/
uint CellIdToCellCountId(uint cellId){
    uint j = (uint)(cellId/(_NeighbourGrid[0]._NbMaxNeighbours*_NeighbourGrid[0]._NbCols));
    uint i = (uint)((cellId-_NeighbourGrid[0]._NbMaxNeighbours*j*_NeighbourGrid[0]._NbCols)/_NeighbourGrid[0]._NbMaxNeighbours);
    return j*_NeighbourGrid[0]._NbCols + i;
}

/**
 * Get the number of particles inside a cell given its id
 * @param cellId The cell id in the neighbour grid
 * @return The number of particles in that cell
*/
uint GetCellCount(uint cellId){
    return _NeighbourGridCellsCounter[CellIdToCellCountId(cellId)];
}

/**
 * Check if a cell is at the top of the grid
 * @param cellId The cell id in the neighbour grid
 * @return True or false
*/
bool IsUpNeighbourBorder(uint cellId){
    return cellId >= (_NeighbourGrid[0]._NbCols * (_NeighbourGrid[0]._NbLines - 1))*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Check if a cell is at the bottom of the grid
 * @param cellId The cell id in the neighbour grid
 * @return True or false
*/
bool IsDownNeighbourBorder(uint cellId){
    return cellId < (_NeighbourGrid[0]._NbCols)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Check if a cell is at the left of the grid
 * @param cellId The cell id in the neighbour grid
 * @return True or false
*/
bool IsLeftNeighbourBorder(uint cellId){
    return cellId % (_NeighbourGrid[0]._NbCols*_NeighbourGrid[0]._NbMaxNeighbours) == 0;
}

/**
 * Check if a cell is at the right of the grid
 * @param cellId The cell id in the neighbour grid
 * @return True or false
*/
bool IsRightNeighbourBorder(uint cellId){
    return cellId % (_NeighbourGrid[0]._NbCols*_NeighbourGrid[0]._NbMaxNeighbours) == (_NeighbourGrid[0]._NbLines - 1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the up left neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetUpLeftNeighbour(uint id){
    if(IsUpNeighbourBorder(id) || IsLeftNeighbourBorder(id)) return -1;
    return id + (_NeighbourGrid[0]._NbCols - 1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the up neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetUpMiddleNeighbour(uint id){
    if(IsUpNeighbourBorder(id)) return -1;
    return id + (_NeighbourGrid[0]._NbCols)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the up right neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetUpRightNeighbour(uint id){
    if(IsUpNeighbourBorder(id) || IsRightNeighbourBorder(id)) return -1;
    return id + (_NeighbourGrid[0]._NbCols + 1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the left neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetMiddleLeftNeighbour(uint id){
    if(IsLeftNeighbourBorder(id)) return -1;
    return id - (1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the id of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id
*/
int GetMiddleMiddleNeighbour(uint id){
    return id;
}

/**
 * Get the right neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetMiddleRightNeighbour(uint id){
    if(IsRightNeighbourBorder(id)) return -1;
    return id + (1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the down left neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetDownLeftNeighbour(uint id){
    if(IsDownNeighbourBorder(id) || IsLeftNeighbourBorder(id)) return -1;
    return id - (_NeighbourGrid[0]._NbCols - 1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the down neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetDownMiddleNeighbour(uint id){
    if(IsDownNeighbourBorder(id)) return -1;
    return id - (_NeighbourGrid[0]._NbCols)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Get the down right neighbour of a given neighbour grid cell
 * @param id The cell id in the neighbour grid
 * @return The neighbour cell's id if it exists, -1 otherwise
*/
int GetDownRightNeighbour(uint id){
    if(IsDownNeighbourBorder(id) || IsRightNeighbourBorder(id)) return -1;
    return id - (_NeighbourGrid[0]._NbCols + 1)*_NeighbourGrid[0]._NbMaxNeighbours;
}

/**
 * Reset the neighbours counters
 * @param id The thread id representing the current neighbour grid cell
*/
[numthreads(1024,1,1)]
void ResetNeighboursCounter(uint3 id : SV_DispatchThreadID){
    if(id.x>=_NeighbourGrid[0]._NbLines*_NeighbourGrid[0]._NbCols || id.x < 0) return;
    _NeighbourGridCellsCounter[id.x] = 0;
    if(id.x < _NbCurParticles) _ParticleNeighbours[id.x*_NeighbourGrid[0]._NbMaxNeighbours] = -1;
}

/**
 * Update the neighbours grid
 * @param id The thread id representing the current neighbour grid cell
*/
[numthreads(1024,1,1)]
void UpdateNeighbours(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NeighbourGrid[0]._NbCols*_NeighbourGrid[0]._NbLines || id.x < 0) return;
    
    uint cpt = 0;
    uint cellId = id.x*_NeighbourGrid[0]._NbMaxNeighbours;

    // check the cell of all particles and update the current grid cell consequently
    for(uint j=0; j<_NbCurParticles; j++){
        ParticleGPU pj = GetParticle(j);
        uint idx = pj._Cell;

        if(idx == cellId){
            _NeighbourGridCells[cellId+cpt] = pj._Id;
            cpt++;
            if(cpt >= _NeighbourGrid[0]._NbMaxNeighbours) break;
        } 
    }
    // update the neighbour counter for the current cell
    _NeighbourGridCellsCounter[id.x] = cpt;
}

/**
 * Add neighbours to the current particle
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void AssignNeighbours(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);

    uint nbNeigh = 0;
    uint partIdx = id.x*_NeighbourGrid[0]._NbMaxNeighbours;

    uint cellIdx = pi._Cell;
    int w11 = GetUpLeftNeighbour(cellIdx);
    int w12 = GetUpMiddleNeighbour(cellIdx);
    int w13 = GetUpRightNeighbour(cellIdx);
    int w21 = GetMiddleLeftNeighbour(cellIdx);
    int w22 = GetMiddleMiddleNeighbour(cellIdx);
    int w23 = GetMiddleRightNeighbour(cellIdx);
    int w31 = GetDownLeftNeighbour(cellIdx);
    int w32 = GetDownMiddleNeighbour(cellIdx);
    int w33 = GetDownRightNeighbour(cellIdx);
    int cells[9] = {w11, w12, w13,
                    w21, w22, w23,
                    w31, w32, w33};

    // get all particles in the surrounding grid cells
    for(uint i=0; i<9; i++){
        if(nbNeigh+1 >= _NeighbourGrid[0]._NbMaxNeighbours) break;
        int idx = cells[i];
        // int idx = cellIdx;
        if(idx <= -1) continue;
        // uint cpt = 1;
        uint cpt = GetCellCount(idx);

        for(uint j=0; j<cpt; j++){
            ParticleGPU pj = GetParticle(_NeighbourGridCells[idx+j]);
            if(!AreNeighbours(pi,pj,H)) continue;
            // if new neighbour is found, update the neighbour list of the current particle
            _ParticleNeighbours[partIdx+nbNeigh] = pj._Id;
            // update the number of neighbours for this particle
            nbNeigh++;
            if(nbNeigh+1 >= _NeighbourGrid[0]._NbMaxNeighbours) break;
        }
    }
    // put a -1 at the end of the neighbour list
    _ParticleNeighbours[partIdx+nbNeigh] = -1;
}



// ##################################################################################################################
// ############################################ TERRRAIN FUNCTIONS ###################################################
// ##################################################################################################################

/**
 * Check if a cell is at the top of the staggered grid
 * @param id The thread id representing the current terrain cell
 * @return True or false
*/
bool IsUpTerrainBorder(uint3 id : SV_DispatchThreadID){
    return id.x >= _StaggeredGrid[0]._NbCols * (_StaggeredGrid[0]._NbLines - 1);
}

/**
 * Check if a cell is at the bottom of the staggered grid
 * @param id The thread id representing the current terrain cell
 * @return True or false
*/
bool IsDownTerrainBorder(uint3 id : SV_DispatchThreadID){
    return id.x < _StaggeredGrid[0]._NbCols;
}

/**
 * Check if a cell is at the left of the staggered grid
 * @param id The thread id representing the current terrain cell
 * @return True or false
*/
bool IsLeftTerrainBorder(uint3 id : SV_DispatchThreadID){
    return id.x % _StaggeredGrid[0]._NbCols == 0;
}

/**
 * Check if a cell is at the right of the staggered grid
 * @param id The thread id representing the current terrain cell
 * @return True or false
*/
bool IsRightTerrainBorder(uint3 id : SV_DispatchThreadID){
    return id.x % _StaggeredGrid[0]._NbCols == _StaggeredGrid[0]._NbLines - 1;
}

/**
 * Get the up left neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetUpLeftTerrain(uint3 id : SV_DispatchThreadID){
    return id.x + _StaggeredGrid[0]._NbCols - 1;
}

/**
 * Get the up neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetUpMiddleTerrain(uint3 id : SV_DispatchThreadID){
    return id.x + _StaggeredGrid[0]._NbCols;
}

/**
 * Get the up right neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetUpRightTerrain(uint3 id : SV_DispatchThreadID){
    return id.x + _StaggeredGrid[0]._NbCols + 1;
}

/**
 * Get the left neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetMiddleLeftTerrain(uint3 id : SV_DispatchThreadID){
    return id.x - 1;
}

/**
 * Get the id of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetMiddleMiddleTerrain(uint3 id : SV_DispatchThreadID){
    return id.x;
}

/**
 * Get the right neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetMiddleRightTerrain(uint3 id : SV_DispatchThreadID){
    return id.x + 1;
}

/**
 * Get the down left neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetDownLeftTerrain(uint3 id : SV_DispatchThreadID){
    return id.x - _StaggeredGrid[0]._NbCols - 1;
}

/**
 * Get the down neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetDownMiddleTerrain(uint3 id : SV_DispatchThreadID){
    return id.x - _StaggeredGrid[0]._NbCols;
}

/**
 * Get the down right neighbour of a given staggered grid cell
 * @param id The thread id representing the current terrain cell
 * @return The staggered grid cell's id
*/
uint GetDownRightTerrain(uint3 id : SV_DispatchThreadID){
    return id.x - _StaggeredGrid[0]._NbCols + 1;
}

/**
 * Blur the terrain's heights to smooth it
 * @param id The thread id representing the current terrain cell
*/
[numthreads(1024,1,1)]
void GaussianBlurTerrainHeights(uint3 id : SV_DispatchThreadID){
    float w11 = IsUpTerrainBorder(id) || IsLeftTerrainBorder(id) ? 0.0f : _TerrainHeights[GetUpLeftTerrain(id)];
    float w12 = IsUpTerrainBorder(id) ? 0.0f : _TerrainHeights[GetUpMiddleTerrain(id)];
    float w13 = IsUpTerrainBorder(id) || IsRightTerrainBorder(id) ? 0.0f : _TerrainHeights[GetUpRightTerrain(id)];
    float w21 = IsLeftTerrainBorder(id) ? 0.0f : _TerrainHeights[GetMiddleLeftTerrain(id)];
    float w22 = _TerrainHeights[GetMiddleMiddleTerrain(id)];
    float w23 = IsRightTerrainBorder(id) ? 0.0f : _TerrainHeights[GetMiddleRightTerrain(id)];
    float w31 = IsDownTerrainBorder(id) || IsLeftTerrainBorder(id)  ? 0.0f : _TerrainHeights[GetDownLeftTerrain(id)];
    float w32 = IsDownTerrainBorder(id) || IsLeftTerrainBorder(id)  ? 0.0f : _TerrainHeights[GetDownMiddleTerrain(id)];
    float w33 = IsDownTerrainBorder(id) || IsLeftTerrainBorder(id)  ? 0.0f : _TerrainHeights[GetDownRightTerrain(id)];

    float GaussFactor = 1.0f/16.0f;
    float GaussMatrix[9] = {1, 2, 1, 2, 4, 2, 1, 2, 1};

    float res =   w11*GaussMatrix[0]*GaussFactor + w12*GaussMatrix[1]*GaussFactor + w13*GaussMatrix[2]*GaussFactor
                + w21*GaussMatrix[3]*GaussFactor + w22*GaussMatrix[4]*GaussFactor + w23*GaussMatrix[5]*GaussFactor
                + w31*GaussMatrix[6]*GaussFactor + w32*GaussMatrix[7]*GaussFactor + w33*GaussMatrix[8]*GaussFactor;

    if(GaussFactor == 0.0f)
        res = w22;

    if(FirstTimeBlur) _InitialTerrainHeights[id.x] = res;
}

/**
 * Update the terrain heights and temperatures
 * @param id The thread id representing the current terrain cell
*/
[numthreads(1024,1,1)]
void UpdateTerrainTemperatures(uint3 id : SV_DispatchThreadID){
    uint maxTerrainId = _StaggeredGrid[0]._NbCols * _StaggeredGrid[0]._NbLines;
    if(id.x >= maxTerrainId || id.x < 0) return;
    float3 pos = StaggeredGridGetPosition(id.x);

    float sumTemperatures = 0.0f;
    float sumHeights = 0.0f;
    float sumWeights = 0.0f;

    float kernelRadius = 10*H;

    // get number of neighbour cells arround me that are inside kernel
    int nbCells = kernelRadius / _NeighbourGrid[0]._DeltaCols + 1;
    int cellId = GetCell(pos);
    int maxId = (int)(_NeighbourGrid[0]._NbCols*_NeighbourGrid[0]._NbLines*_NeighbourGrid[0]._NbMaxNeighbours);

    // check cells inside radius
    for(int k=-nbCells; k<=nbCells; k++){
        for(int i=-nbCells; i<=nbCells; i++){
            int idx = cellId + (i + (k*_NeighbourGrid[0]._NbCols))*_NeighbourGrid[0]._NbMaxNeighbours;
            // do not count cells outside the grid
            if(idx < 0 || idx >= maxId) continue;
            uint cpt = GetCellCount(idx);

            // get all the particles pj in the current cell
            for(uint j=0; j<cpt; j++){
                ParticleGPU pj = GetParticle(_NeighbourGridCells[idx+j]);
                if(!AreNeighbours(pos, pj._Position, kernelRadius)) continue;

                // update heights using new kernel radius
                float wij = W_POLY6(pos, pj._Position, kernelRadius);
                sumHeights += wij*pj._Volume;
                sumWeights += wij;
                // udpate temperature using old kernel
                if(!AreNeighbours(pos, pj._Position,H)) continue;
                float wij2 = W_POLY6(pos, pj._Position, H);
                sumTemperatures += pj._Temperature * wij2 * pj._Volume / pj._Height;
            }
        }
    }
    
    _TerrainHeights[id.x] = sumHeights;
    _TerrainTemperatures[id.x] = sumTemperatures;
}

/**
 * Update the terrain heights
 * @param id The thread id representing the current terrain cell
*/
[numthreads(1024,1,1)]
void UpdateTerrainHeights(uint3 id : SV_DispatchThreadID){
    if(id.x >= _StaggeredGrid[0]._NbCols * _StaggeredGrid[0]._NbLines || id.x < 0) return;
    float newHeight = SPIKE*(_TerrainHeights[id.x]) + _InitialTerrainHeights[id.x];
    _TerrainHeights[id.x] = newHeight;
    // reset heights if shouldn't display lava
    if(!_DisplayLava) _TerrainHeights[id.x] = _InitialTerrainHeights[id.x];
}



// ##################################################################################################################
// ############################################ Kernel FUNCTIONS #######################################################
// ##################################################################################################################

/**
 * Update the height of all particles inside the particle buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void PropagateHeightUpdate(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);
    pi._Height         = _Heights[id.x];
    pi._HeightGradient = _HeightsGradients[id.x];
    _Particles[id.x] = pi;
}

/**
 * Update the position of all particles inside the particle buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void PropagatePositionUpdate(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);
    float3 newPosition = _Positions[id.x];
    pi._Position = newPosition;
    pi._Cell = GetCell(newPosition);
    _Particles[id.x] = pi;
}

/**
 * Generate new particles
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void GenerateParticle(uint3 id : SV_DispatchThreadID){
    if(id.x < _NbNewParticles && id.x >= 0){
        uint i = (_NbCurParticles - 1 - id.x);

        float density = RHO_0;
        float a = (2.0/3.0)*H;
        float mass = a*a*a*RHO_0;
        float volume = mass / density;

        // initiate the particle
        ParticleGPU p; 
        float3 pos = GenRandomPos(_NewPosition, id.x);
        p._Velocity = float3(0.0f,0.0f,0.0f);
        p._Position = pos;
        p._Height = 0.0f;
        p._HeightGradient = float3(0,0,0);
        p._Density = density;
        p._Mass = mass;
        p._Volume = volume;
        p._Temperature = _Ke;
        p._Cell = GetCell(pos);
        p._Id = i;
        
        // udpate the buffers
        _Velocities[i]       = p._Velocity;
        _Positions[i]        = p._Position;
        _Heights[i]          = p._Height;
        _HeightsGradients[i] = p._HeightGradient;
        _Temperatures[i]     = p._Temperature;
        _Particles[i]        = p;
    }
}

/**
 * Update particle's heights buffers
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void UpdateHeights(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);

    float sumHeights = 0.0f;
    float3 sumGrads  = float3(0.0f, 0.0f, 0.0f);

    int initialId = id.x*_NeighbourGrid[0]._NbMaxNeighbours;
    int cpt = 0;
    int pjId = _ParticleNeighbours[initialId];

    while(pjId >= 0){
        ParticleGPU pj = GetParticle(pjId);

        float  wijHeight = W_POLY6(pi, pj, H);
        float3 wijGrad   = W_POLY6_Grad(pi, pj, H);

        sumHeights += wijHeight * pj._Volume;
        sumGrads   += wijGrad * pj._Volume;

        // get next neighbour
        cpt++;
        pjId = _ParticleNeighbours[initialId+cpt];
    }

    // update buffers
    _Heights[id.x] = sumHeights;
    _HeightsGradients[id.x] = sumGrads;
}

/**
 * Update particle's positions buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void TimeIntegration(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);

    float3 curPosition = pi._Position;
    float3 newVelocity = pi._Velocity;
    float3 newPosition = DT*newVelocity + curPosition;

    newPosition.y = StaggeredGridGetHeight(newPosition);

    _Positions[id.x] = newPosition;
}


// ##################################################################################################################
// ############################################ Viscosity FUNCTIONS #######################################################
// ##################################################################################################################

/**
 * Update particle's temperatures buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void UpdateTemperatures(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);

    float sumTemperatures = 0.0f;

    int initialId = id.x*_NeighbourGrid[0]._NbMaxNeighbours;
    int cpt = 0;
    int pjId = _ParticleNeighbours[initialId];

    while(pjId >= 0){
        ParticleGPU pj = GetParticle(pjId);

        float  wij = W_POLY6(pi, pj, H);
        sumTemperatures += pj._Temperature * wij * pj._Volume / pj._Height;

        // get next neighbour
        cpt++;
        pjId = _ParticleNeighbours[initialId+cpt];
    }
    _Temperatures[id.x] = sumTemperatures;
}

/**
 * Update the temperatures of all particles inside the particle buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void PropagateTemperatureUpdate(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);
    pi._Temperature = _Temperatures[id.x];
    _Particles[id.x] = pi;
}

/**
 * The Arrhenius law for the temperature
 * @param theta The temperature parameter
 * @return The new temperature
*/
float FTemp(float theta){
    return _Ke*exp(ALPHA*(_ThetaE-theta));
}

/**
 * Update particle's velocities buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void UpdateVelocities(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);

    float3 sumVelocities = float3(0.0f,0.0f,0.0f);

    int initialId = id.x*_NeighbourGrid[0]._NbMaxNeighbours;
    int cpt = 0;
    int pjId = _ParticleNeighbours[initialId];

    while(pjId >= 0){
        ParticleGPU pj = GetParticle(pjId);

        float f_theta = FTemp(pj._Temperature);
        float mu = _Mu;
        float rho = pj._Density;
        float3 gradSurface = GetGradientSurface(pj);

        float3 b = -(rho*G)/(f_theta*mu)*gradSurface;
        float wij = W_NEW(pi, pj, H);

        sumVelocities += wij*b;

        // get next neighbour
        cpt++;
        pjId = _ParticleNeighbours[initialId+cpt];
    }

    _Velocities[id.x] = sumVelocities;
}

/**
 * Update the velocities of all particles inside the particle buffer
 * @param id The thread id representing the current particle
*/
[numthreads(128,1,1)]
void PropagateVelocityUpdate(uint3 id : SV_DispatchThreadID){
    if(id.x >= _NbCurParticles || id.x < 0) return;
    ParticleGPU pi = GetParticle(id);
    pi._Velocity = _Velocities[id.x];
    _Particles[id.x] = pi;
}